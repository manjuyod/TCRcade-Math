
# Math Rush Progression Logic Implementation Agent

## Project Context
**Stack:** React TS client, Node Express TS server, Drizzle ORM, PostgreSQL  
**Objective:** Implement forced progression logic for Math Rush modules where test completion enables token runs, and mastery enables choice.

## Core Requirements

### Progression Flow Logic
1. **Assessment Completion → Token Runs Only**
   - When `test_taken = true` AND `mastery_level = false`
   - Force user into 1-minute token runs following strict progression
   - NO access to setup page (choice) until mastery achieved

2. **Mastery Achievement → Full Choice**
   - When `test_taken = true` AND `mastery_level = true`
   - Allow access to setup page with full customization options
   - User can choose time duration and question types

### Database Integration
Check user progress via JSON structure:
```sql
SELECT hidden_grade_asset #>> '{modules,math_rush[operator],progress,test_taken,mastery_level}' 
FROM users WHERE id = {current_user_id}
```

### Progression Arrays (Server Implementation)

#### Addition Progression
```typescript
export const ADDITION_PROGRESSION = [
  'Adding 0 and 1',    // step 1  (index 0)
  'Adding 10',         // step 2
  'Adding 2',          // step 3
  'Adding 3',          // step 4
  'Adding 4',          // step 5
  'Adding 5',          // step 6
  'Mixed 0–5',         // step 7
  'Adding 6',          // step 8
  'Adding 7',          // step 9
  'Adding 8',          // step 10
  'Adding 9',          // step 11
  'Doubles to 20',     // step 12
  'Mixed 6–10',        // step 13 (index 12)
];
```

#### Subtraction Progression
```typescript
export const SUBTRACTION_PROGRESSION = [
  'Subtract From 0–3',            // step 1  (index 0)
  'Subtract From 10',             // step 2
  'Subtract From 4',              // step 3
  'Subtract From 5',              // step 4
  'Subtraction Mixed 0–5',        // step 5
  'Subtract From 6',              // step 6
  'Subtract From 7',              // step 7
  'Subtract From 8',              // step 8
  'Subtract From 9',              // step 9
  'Subtraction Half of a Double', // step 10
  'Subtraction Mixed 6–10',       // step 11
  'Subtraction Odd Balls',        // step 12 (index 11)
];
```

#### Multiplication Progression
```typescript
export const MULTIPLICATION_PROGRESSION = [
  'Multiply by 0 and 1',  // step 1
  'Multiply by 2',        // step 2
  'Multiply by 3',        // step 3
  'Multiply by 4',        // step 4
  'Multiply by 5',        // step 5
  'Mixed 0–5',           // step 6
  'Multiply by 6',        // step 7
  'Multiply by 7',        // step 8
  'Multiply by 8',        // step 9
  'Multiply by 9',        // step 10
  'Multiply by 10',       // step 11
  'Multiply by 11',       // step 12
  'Multiply by 12',       // step 13
  'Multiply Doubles',     // step 14
  'Mixed 6–12',          // step 15
];
// Note: If user above level 5, auto-skip multiply by 0, 1, and 2
```

#### Division Progression
```typescript
export const DIVISION_PROGRESSION = [
  'Divide by 2',       // step 4   (index 0)
  'Divide by 3',       // step 5
  'Divide by 4',       // step 6
  'Divide by 5',       // step 7
  'Divide by 6',       // step 8
  'Mixed 2–6',         // step 12
  'Divide by 7',       // step 9
  'Divide by 8',       // step 10
  'Divide by 9',       // step 11
  'Divide by 10',      // step 1
  'Divide by 11',      // step 2
  'Divide by 12',      // step 3
  'Mixed 7–12',        // step 13
];
// Note: If user above level 5, auto-skip divide by 2
```

## Implementation Tasks

### 1. Server-Side Progression Logic
- **File:** `server/modules/mathRushProgression.ts`
- Create progression tracking functions
- Implement next step determination logic
- Handle mastery level calculations

### 2. Route Modifications
- **File:** `server/routes.ts`
- Update Math Rush start endpoint to check progression state
- Implement forced progression vs. choice logic
- Add progression status endpoint

### 3. Client-Side Flow Control
- **File:** `client/src/pages/rush/setup-page.tsx`
- Add progression state checking
- Redirect to forced progression when mastery = false
- Show choice interface only when mastery = true

### 4. Progression Play Page
- **File:** `client/src/pages/rush/progression-play-page.tsx`
- New component for forced progression sessions
- Always 1-minute timer for token runs
- Single question type based on progression step

### 5. Database Progress Tracking
- Update `hiddenGradeAsset.modules.math_rush[operator].progress`
- Track current progression step
- Update mastery flags based on progression completion

## End-to-End Testing Suite

### Test Scenarios

#### Scenario 1: Assessment Complete, Mastery False
```javascript
// Test that user is forced into progression
// Cannot access setup page
// Gets specific question type for current step
// 1-minute timer enforced
```

#### Scenario 2: Progression Step Completion
```javascript
// Test progression advancement
// Verify next step unlocks
// Check database updates
// Validate token earning
```

#### Scenario 3: Mastery Achievement
```javascript
// Test full progression completion
// Verify mastery flag set to true
// Confirm setup page access granted
// Validate full choice functionality
```

#### Scenario 4: Grade Level Auto-Skip
```javascript
// Test multiplication level 5+ skips early steps
// Test division level 5+ skips divide by 2
// Verify progression array adjustments
```

### E2E Test Implementation

Create `test-math-rush-progression.js`:

```javascript
#!/usr/bin/env node

class MathRushProgressionE2ETest {
  constructor() {
    this.baseUrl = 'http://localhost:5000';
    this.testResults = [];
  }

  async testAssessmentToProgression() {
    // Test flow from assessment completion to forced progression
  }

  async testProgressionAdvancement() {
    // Test step-by-step progression through all levels
  }

  async testMasteryAchievement() {
    // Test transition from progression to choice
  }

  async testAutoSkipLogic() {
    // Test grade-based auto-skip functionality
  }

  async runAllTests() {
    // Execute comprehensive test suite
  }
}

// Execute tests
const tester = new MathRushProgressionE2ETest();
tester.runAllTests();
```

## Success Criteria

1. **Forced Progression:** Users with `test_taken=true, mastery_level=false` cannot access setup page
2. **Token Runs Only:** Progression sessions are always 1-minute token runs
3. **Step Tracking:** Database accurately tracks current progression step
4. **Mastery Unlock:** Setup page access granted only when `mastery_level=true`
5. **Auto-Skip Logic:** Higher grade levels skip appropriate early steps
6. **E2E Validation:** All test scenarios pass without errors

## Implementation Priority
1. Server-side progression logic and database integration
2. Client-side flow control and routing
3. Progression play page implementation
4. Mastery calculation and database updates
5. Comprehensive E2E testing suite
6. Grade-level auto-skip logic refinement

Execute this implementation to create a robust Math Rush progression system that enforces proper learning sequences while rewarding mastery with increased choice and flexibility.
