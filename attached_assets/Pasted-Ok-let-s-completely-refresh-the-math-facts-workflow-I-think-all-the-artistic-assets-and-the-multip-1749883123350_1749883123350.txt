Ok, let's completely refresh the math facts workflow. I think all the artistic assets and the multiple choice is great. HOWEVER, there are errors in the current math facts modules. Your goal is to design a replit agent prompt that will improve/refactor our current end to end math fact flow.

1. Structure - Structures are set, but the agent needs to analyze every piece in order to make decisions. Also, it must resolve all issues where users.grade = 'K' should = grade_level = 0

2. Routing - Make sure routing works well

3. Any rules regarding question generation needs to be migrated and consolidated either to shared or the module server side.

4. Difficulty scaling - Update number ranges to this:

/**
 * Math-fact AND on-grade computation ranges
 * ----------------------------------------
 *  – K-2:   single-digit facts (required by CCSS)
 *  – Gr 3:  add/sub to 1 000; ×/÷ facts through 10
 *  – Gr 4:  add/sub to 10 000; 2-digit × 2-digit; 4-digit ÷ 1-digit
 *  – Gr 5+: multi-digit operations (expand as needed)
 *
 *  NOTE: K-2 ×/÷ blocks are enrichment, not part of CCSS.
 */
const NUMBER_RANGES = {
  /* ---------- ADDITION ---------- */
  addition: {
    K: { min1: 1,   max1: 5,    min2: 1,   max2: 5  },     // sums within 5
    1: { min1: 1,   max1: 10,   min2: 1,   max2: 10 },     // sums within 10
    2: { min1: 1,   max1: 20,   min2: 1,   max2: 20 },     // sums within 20
    3: { min1: 100, max1: 999,  min2: 100, max2: 999 },    // to 1 000
    4: { min1: 1000,max1: 9999, min2: 1000,max2: 9999 },   // to 10 000
    5: { min1: 10000, max1: 99999, min2: 10000, max2: 99999 },
    6: { min1: 10000, max1: 99999, min2: 10000, max2: 99999 },
    default: { min1: 10000, max1: 99999, min2: 10000, max2: 99999 }
  },

  /* ---------- SUBTRACTION ---------- */
  subtraction: {
    K: { min2: 1,   max2: 3,    minDiff: 0,   maxDiff: 4  },
    1: { min2: 1,   max2: 5,    minDiff: 0,   maxDiff: 9  },
    2: { min2: 1,   max2: 10,   minDiff: 0,   maxDiff: 19 },
    3: { min2: 1,   max2: 999,  minDiff: 0,   maxDiff: 999 },
    4: { min2: 1,   max2: 9999, minDiff: 0,   maxDiff: 9999 },
    5: { min2: 1,   max2: 99999,minDiff: 0,   maxDiff: 99999 },
    6: { min2: 1,   max2: 99999,minDiff: 0,   maxDiff: 99999 },
    default: { min2: 1, max2: 99999, minDiff: 0, maxDiff: 99999 }
  },

  /* ---------- MULTIPLICATION ---------- */
  multiplication: {
    // K-2 multiplication = enrichment (comment out to disable)
    K: { min1: 1, max1: 5,  min2: 1,  max2: 5  },
    1: { min1: 1, max1: 5,  min2: 1,  max2: 5  },
    2: { min1: 1, max1: 5,  min2: 1,  max2: 5  },
    3: { min1: 1, max1: 10, min2: 1,  max2: 10 },           // facts through 10×10
    4: { min1: 10, max1: 99, min2: 10, max2: 99 },           // 2-digit × 2-digit
    5: { min1: 100, max1: 999, min2: 10,  max2: 99 },        // 3-digit × 2-digit
    6: { min1: 100, max1: 999, min2: 10,  max2: 99 },
    default: { min1: 100, max1: 999, min2: 10, max2: 99 }
  },

  /* ---------- DIVISION ---------- */
  division: {
    // K-2 division = enrichment (comment out to disable)
    K: { minDivisor: 2, maxDivisor: 5,  minQuotient: 1,  maxQuotient: 4 },
    1: { minDivisor: 2, maxDivisor: 5,  minQuotient: 1,  maxQuotient: 4 },
    2: { minDivisor: 2, maxDivisor: 5,  minQuotient: 1,  maxQuotient: 4 },
    3: { minDivisor: 2, maxDivisor: 10, minQuotient: 1,  maxQuotient: 9 },      // facts within 100
    4: { minDivisor: 2, maxDivisor: 9,  minQuotient: 10, maxQuotient: 9999 },   // 4-digit ÷ 1-digit
    5: { minDivisor: 2, maxDivisor: 99, minQuotient: 10, maxQuotient: 999 },    // multi-digit ÷ 2-digit
    6: { minDivisor: 2, maxDivisor: 99, minQuotient: 10, maxQuotient: 999 },
    default: { minDivisor: 2, maxDivisor: 99, minQuotient: 10, maxQuotient: 999 }
  }
};

export default NUMBER_RANGES;


5. Actual Game Rules. 
- Initial Testing
On click of math any math facts. If test = false, it takes you to the test play page. To find initial test difficulty: SELECT Grade FROM users. If {Grade} = K, then start with K questions etc all the way up to 5th grade. If {Grade} = 6-12, then start with 6th grade questions. Max 6th grade.
*Begin Test* "assessment-play-page.tsx"
Addition - 2 questions at {Grade} level. If two correct, then it's a pass. If even one incorrect, then drop down a grade level and load those questions. repeat until there is 100% accuracy at that grade level. Then use the new grade level that the user was able to complete to write to users.hidden_grade_asset.module.addition_facts.grade_level. Change users.hidden_grade_asset.module.addition_facts.progress.test_taken=true.
Subtraction - 2 questions at {Grade} level. If two correct, then it's a pass. If even one incorrect, then drop down a grade level and load those questions. repeat until there is 100% accuracy at that grade level. Then use the new grade level that the user was able to complete to write to users.hidden_grade_asset.module.subtraction_facts.grade_level. Change users.hidden_grade_asset.module.subtraction_facts.progress.test_taken=true.
Multiplication - 2 questions at {Grade} level. If two correct, then it's a pass. If even one incorrect, then drop down a grade level and load those questions. repeat until there is 100% accuracy at that grade level. Then use the new grade level that the user was able to complete to write to users.hidden_grade_asset.module.multiplication_facts.grade_level. Change users.hidden_grade_asset.module.multiplication_facts.progress.test_taken=true.
Division - 2 questions at {Grade} level. If two correct, then it's a pass. If even one incorrect, then drop down a grade level and load those questions. repeat until there is 100% accuracy at that grade level. Then use the grade level that the user was able to complete to write to users.hidden_grade_asset.module.division_facts.grade_level. Change users.hidden_grade_asset.module.division_facts.progress.test_taken=true.

On completion, go to then it takes you to a "assessment-complete-page" where it shows a summary of the grade levels achieved, and 15 tokens for attempting! - AT THIS STAGE DATA MUST BE UPDATED IN THE users.hidden_grade_asset JSON (current data) AND the table module_history for historical data.

- Actual game play
- When you choose the respective module from the module page, it should take you to a loading page - Here it batch generates 6 random questions multiple choice based on grade_level for the specific operator (it's currently 10).
- From the loading page, then it takes you to the respective play page for the chosen operator. For every question correct, a token is earned. 100% earns 4 extra tokens. Tokens and questions must be updated client side for speed, then database side fo
-- On 80% or 100% UPDATE users SET hidden_grade_asset=jsonb_set(hidden_grade_asset,'{modules,[whatever fact it's on],progress,attempt_bad=0},increment attempt_good WHERE ID = CURRENT USER
-- On less than 80% UPDATE users SET hidden_grade_asset=jsonb_set(hidden_grade_asset,'{modules,[whatever fact it's on],progress,attempt_good=0},increment attempt_bad WHERE ID = CURRENT USER
--- If the user has attempt_good = 4 then increase grade level MAX 6, and reset attempt_good and attempt_bad to 0, and take them to a level increase page before taking them to the complete_page.
--- If the user has attempt_bad = 4 then decrease grade level MAX 6, and reset attempt_good and attempt_bad to 0, and take them to a level increase page before taking them to the complete_page.
- On completion it takes you to the "complete-page.tsx" where it shows a summary and the option to try again or go to the modules page.

Please ask clarifying questions before making a prompt.