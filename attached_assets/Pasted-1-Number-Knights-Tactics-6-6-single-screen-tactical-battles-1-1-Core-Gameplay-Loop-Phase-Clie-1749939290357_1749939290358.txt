1 ★ Number Knights Tactics
(6 × 6 single-screen tactical battles)

1.1 Core Gameplay Loop
Phase	Client Action	Server Action	Notes
Load Board	GET /api/tactics/board?matchId → tiles + units JSON	—	All positions pre-calculated server-side for anti-cheat.
Select Unit	Highlight legal move + attack targets	—	Only one hop per turn, no path-finding headaches.
Attempt Action	Emit tactics_attempt {matchId, unitId, actionType, target}	Validate math → return tactics_result	One problem per action; failure = miss.
End Turn	Auto-switch to AI or opposing player	AI turn simulated server-side → broadcast new board	AI = random legal move biased toward closest player unit.
Victory / Defeat	Show summary → tactics_complete {matchId, result, accuracy, newTokenBalance}	Persist win/loss, tokens, MMR	MMR = optional if you want PvP ladder later.

1.2 Math → Battle Mapping
Grade Band	Problem Pools	Damage Formula
K-1	add/sub ≤ 20	correct → 2 HP, wrong → 0
2-3	add/sub 3-digit, ×/÷ ≤ 100	correct → 3 HP
4-6	fractions, order-of-ops, factor pairs	correct → 4 HP

HP per unit = 6 so one or two good answers decides the fight—keeps rounds < 3 min.

1.3 Data Model (Drizzle / Postgres)
ts
Copy
Edit
export const tacticsMatches = pgTable("tactics_matches", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").references(() => users.id).notNull(),
  boardState: json("board_state").notNull(),  // tile + unit array
  turnNumber: integer("turn_number").default(0).notNull(),
  isComplete: boolean("is_complete").default(false).notNull(),
  createdAt: timestamp("created_at").defaultNow()
});
Board JSON schema

ts
Copy
Edit
type Unit = { id: string; team: "player"|"ai"; row: number; col: number; hp: number };
type BoardState = { tiles: 6[][]; units: Unit[] };
1.4 Socket Events
text
Copy
Edit
tactics_attempt     // C → S  {matchId, unitId, actionType:"move"|"attack", target:{row,col}}
tactics_result      // S → C  {success:boolean, newBoard:BoardState}
tactics_complete    // S → C  {matchId, result:"win"|"lose", accuracy, newTokenBalance}
1.5 UX & Art
Isometric sprites 48 px; reuse Tailwind grid with transform: skewY(-10deg) for pseudo-iso.

One-click “hint” button: shows a worked example of the current problem type (pull from /api/hints/:skillId).

1.6 Stretch Polish
Co-op Mode: two students vs AI, turn order P1 → P2 → AI.

Unit Skins: cosmetic only, pulled from existing avatar inventory—link table knightSkins.