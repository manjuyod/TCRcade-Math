You are an AI debugging and refactoring assistant operating directly in our development workspace (no branching or remote pushes). A new issue has surfaced: the “tokens” and “performance” statistics in our Learning Analytics feature are not being persisted or shown as a running total after a page reload. Your goal is to trace, diagnose, and patch this bug end‑to‑end. Follow these steps:

1. **Confirm Current Workflow**  
   - Identify where “tokens” and “performance” are calculated in the front‑end (e.g. React state, Redux store).  
   - Trace the network requests involved when these stats are updated (e.g. POST to `/api/analytics/updateStats`).  
   - Locate the back‑end handlers (e.g. Express/controller) that receive these updates.  
   - Inspect the database schema and queries that read/write these fields (e.g. table columns, ORM models).

2. **Reproduce the Bug**  
   - Simulate a user session: answer some questions to increment tokens/performance, reload the page, and observe the UI state.  
   - Confirm that the API call to fetch running totals either returns zero or stale data.

3. **Diagnose Root Causes**  
   - In the front‑end:  
     - Check whether the initial data fetch (e.g. `analyticsService.getStats()`) maps the returned payload correctly into state.  
     - Verify that local storage or persistence layers aren’t inadvertently clearing values on reload.  
   - In the back‑end:  
     - Ensure that the update handler actually writes cumulative totals rather than session‑only increments.  
     - Look for missing `UPDATE` vs. `INSERT` logic or absence of an `ON CONFLICT ... DO UPDATE` clause.  
   - In the database:  
     - Confirm the table has persistent columns for cumulative tokens and performance and that migrations are up to date.  
     - Run a manual SQL query to see if historical totals exist.

4. **Generate & Apply Fixes**  
   For each root cause you identify, in isolation:  
   a. **Front‑end patch**: fix state mapping or add persistence (e.g. save to localStorage or call the correct GET endpoint).  
   b. **Back‑end patch**: adjust the SQL/ORM logic to accumulate totals instead of overwriting or ignoring existing records.  
   c. **Database schema**: add or modify columns/migrations if necessary to support cumulative storage.  
   After each patch, re‑run the linter and test suite (`npm run lint && npm test` or `pytest`) — only keep changes that pass all checks. Reproduce the bug again to confirm the fix.

5. **Summarize & Bundle**  
   - Produce a unified diff of all applied changes.  
   - List each issue you fixed (e.g. “Changed UPDATE to UPSERT in stats controller,” “Mapped API response correctly in AnalyticsContext,” “Added cumulative_tokens column migration”).  
   - Note any deferred items requiring manual review.

6. **Output**  
   Return only your summary, unified diff, and any notes on outstanding issues. Do not commit or push—this patch is for a developer to review and merge.  
