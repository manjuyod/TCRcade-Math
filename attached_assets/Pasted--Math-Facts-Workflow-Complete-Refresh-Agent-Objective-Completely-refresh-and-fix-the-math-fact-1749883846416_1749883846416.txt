
# Math Facts Workflow Complete Refresh Agent

## Objective
Completely refresh and fix the math facts workflow with improved structure, routing, question generation, and difficulty scaling while resolving all current errors.

## Project Context
- **Stack**: React TS client, Node Express TS server, Drizzle ORM
- **Database**: PostgreSQL with `users.hidden_grade_asset` JSON field
- **Current Status**: Build failing due to duplicate symbol declarations
- **Goal**: Working end-to-end math facts flow with proper assessment and practice modes

## Critical Issues to Fix

### 1. Build Error Resolution
**Current Error**: `The symbol "getNextGradeLevel" has already been declared` in `server/routes.ts:661:45`

**Required Actions**:
- Remove duplicate import/declaration of `getNextGradeLevel` in `server/routes.ts`
- Ensure all grade conversion functions are imported from `shared/mathFactsRules.ts`
- Fix any conflicting function declarations

### 2. Grade Level Standardization (K = 0)
**Requirements**:
- Convert ALL instances where `users.grade = 'K'` to `grade_level = 0`
- Implement consistent grade normalization throughout the system
- Use `normalizeGrade()` and `gradeToString()` functions from shared rules
- Update JSON structure in `hidden_grade_asset.modules.{operation}_facts.grade_level`

### 3. Updated Number Ranges Implementation
Replace existing difficulty scaling with these exact ranges:

```typescript
const NUMBER_RANGES = {
  addition: {
    0: { min1: 1,   max1: 5,    min2: 1,   max2: 5  },     // K: sums within 5
    1: { min1: 1,   max1: 10,   min2: 1,   max2: 10 },     // sums within 10
    2: { min1: 1,   max1: 20,   min2: 1,   max2: 20 },     // sums within 20
    3: { min1: 100, max1: 999,  min2: 100, max2: 999 },    // to 1,000
    4: { min1: 1000,max1: 9999, min2: 1000,max2: 9999 },   // to 10,000
    5: { min1: 10000, max1: 99999, min2: 10000, max2: 99999 },
    6: { min1: 10000, max1: 99999, min2: 10000, max2: 99999 },
    default: { min1: 10000, max1: 99999, min2: 10000, max2: 99999 }
  },
  // ... (continue with subtraction, multiplication, division)
};
```

### 4. Assessment vs Practice Flow Logic
**Assessment Flow** (`test_taken = false`):
- User takes assessment to determine appropriate grade level
- 2 questions per grade level, starting from user's grade
- If perfect score → that's their level
- If not perfect → drop down one grade and try again
- Store final grade in `hidden_grade_asset.modules.{operation}_facts.grade_level`
- Set `test_taken = true`
- Award 15 tokens for assessment completion

**Practice Flow** (`test_taken = true`):
- Read current `grade_level` from JSON
- Generate 6 practice questions at that level
- Track `attempt_good` and `attempt_bad` counters
- 4 consecutive good attempts → level up
- 4 consecutive bad attempts → level down
- Award tokens based on performance

### 5. API Endpoint Structure
**Required Endpoints**:
```
GET  /api/math-facts/:operation/questions?grade=X&count=6
GET  /api/math-facts/assessment/:operation?grade=X
POST /api/math-facts/assessment/complete
POST /api/math-facts/session/complete
```

### 6. Database Schema Integration
**User Table Updates**:
- Ensure `hidden_grade_asset` JSON field exists
- Structure: `{ modules: { addition_facts: { grade_level: 0, progress: {...} } } }`
- Sync latest progress to `module_history` table (historical tracking only)

### 7. Routing Fixes
**Client Routes** (using wouter):
```
/math-facts/:operation/loading     → Check assessment status
/math-facts/:operation/assessment  → Take assessment
/math-facts/:operation/play        → Practice session
/math-facts/:operation/complete    → Session results
```

## Implementation Requirements

### Phase 1: Fix Build Errors
1. Remove duplicate `getNextGradeLevel` declarations from `server/routes.ts`
2. Consolidate all grade utility functions in `shared/mathFactsRules.ts`
3. Update imports to use shared functions consistently

### Phase 2: Question Generation Consolidation
1. Move all math facts rules to `shared/mathFactsRules.ts`
2. Implement algorithmic generation (no AI dependency)
3. Use updated NUMBER_RANGES for all operations
4. Ensure deterministic, efficient question creation

### Phase 3: Assessment Implementation
1. Update assessment flow in `/api/math-facts/assessment/:operation`
2. Implement grade-dropping logic for assessment
3. Store results in `hidden_grade_asset.modules.{operation}_facts`
4. Award 15 tokens for assessment completion

### Phase 4: Practice Session Logic
1. Read current grade level from JSON
2. Generate practice questions using updated ranges
3. Implement attempt tracking (`attempt_good`, `attempt_bad`)
4. Handle level progression (up/down after 4 attempts)

### Phase 5: Client Integration
1. Fix any remaining router issues (wouter imports)
2. Ensure loading page checks assessment status
3. Route to assessment or practice based on `test_taken` flag
4. Display appropriate grade level and progress

## Success Criteria

### Technical Validation
- [ ] Build starts without errors (`npm run dev` succeeds)
- [ ] All API endpoints respond correctly
- [ ] Database updates work for both assessment and practice
- [ ] Module history tracking functions properly

### Functional Testing
- [ ] New user takes assessment → gets appropriate grade level
- [ ] Practice sessions update progress correctly
- [ ] Level progression works (both up and down)
- [ ] Token awards are accurate (1 per correct + 4 bonus for perfect)
- [ ] All four operations (addition, subtraction, multiplication, division) work

### Data Integrity
- [ ] `hidden_grade_asset.modules.{operation}_facts.grade_level` stores numbers (K=0)
- [ ] Assessment completion sets `test_taken = true`
- [ ] Practice sessions update `attempt_good`/`attempt_bad` counters
- [ ] Module history records sessions with correct grade levels

## Execution Priority
1. **CRITICAL**: Fix build error (duplicate symbol)
2. **HIGH**: Implement grade normalization (K=0)
3. **HIGH**: Update number ranges in shared rules
4. **MEDIUM**: Fix assessment flow logic
5. **MEDIUM**: Implement practice session tracking
6. **LOW**: Verify client routing works

## Expected Outcome
A fully functional math facts system where:
- New users take an assessment to find their level
- Existing users practice at their current level
- Progress tracking works correctly with level changes
- All grade references use numeric values (K=0)
- Token awards are consistent and accurate
- No build errors or runtime issues

Start with fixing the immediate build error, then systematically work through each phase to restore full functionality.
